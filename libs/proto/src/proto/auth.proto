syntax = "proto3";

package auth;

service AuthService {
  rpc Register (RegisterRequest) returns (AuthResponse);
  rpc Login (LoginRequest) returns (AuthResponse);
  rpc RefreshToken (RefreshTokenRequest) returns (AuthResponse);
  rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc Logout (LogoutRequest) returns (LogoutResponse);

  rpc CheckPermission (CheckPermissionRequest) returns (CheckPermissionResponse);
  rpc GetUserPermissions (GetUserPermissionsRequest) returns (GetUserPermissionsResponse);
  rpc CheckRole (CheckRoleRequest) returns (CheckRoleResponse);
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse);

  rpc GetAllUsers (GetAllUserRequest) returns (GetAllUserResponse);
  rpc GetUserById (GetUserByIdRequest) returns (UserResponse);
  rpc CreateUser (CreateUserRequest) returns (UserResponse);
  rpc UpdateUser (UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

  rpc AssignRoleToUser (AssignRoleToUserRequest) returns (AssignRoleToUserResponse);
  rpc RemoveRoleFromUser (RemoveRoleFromUserRequest) returns (RemoveRoleFromUserResponse);
  rpc AssignPermissionToRole (AssignPermissionToRoleRequest) returns (AssignPermissionToRoleResponse);
  rpc RemovePermissionFromRole (RemovePermissionFromRoleRequest) returns (RemovePermissionFromRoleResponse);

  rpc CreateRole (CreateRoleRequest) returns (RoleResponse);
  rpc UpdateRole (UpdateRoleRequest) returns (RoleResponse);
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse);
  rpc GetAllRoles (GetAllRolesRequest) returns (GetAllRolesResponse);

  rpc CreatePermission (CreatePermissionRequest) returns (PermissionResponse);
  rpc UpdatePermission (UpdatePermissionRequest) returns (PermissionResponse);
  rpc DeletePermission (DeletePermissionRequest) returns (DeletePermissionResponse);
  rpc GetAllPermissions (GetAllPermissionsRequest) returns (GetAllPermissionsResponse);
}

// Authentication
message RegisterRequest {
  string name = 1;
  string email = 2;
  string phone = 3;
  string password = 4;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message RefreshTokenRequest {
  string refreshToken = 1;
}

message AuthResponse {
  string accessToken = 1;
  string refreshToken = 2;
  string userId = 3;
  string email = 4;
  repeated string roles = 5;
}

message ValidateTokenRequest {
  string accessToken = 1;
}

message ValidateTokenResponse {
  string userId = 1;
  string email = 2;
  bool isValid = 3;
   repeated string roles = 4;
}

message LogoutRequest {
  string refreshToken = 1;
}

message LogoutResponse {
  bool success = 1;
}

message User {
  string id = 1;
  string name = 2;
  string email = 3;
  string phone = 4;
  repeated string roles = 5;
  bool isActive = 6;
  string createdAt = 7;
  string updatedAt = 8;
}

message UserResponse {
  User user = 1;
}

message GetUserByIdRequest {
  string id = 1;
}

message CreateUserRequest {
  string name = 1;
  string email = 2;
  string phone = 3;
  string password = 4;
  repeated string rolesId = 5;
}

message UpdateUserRequest {
  string id = 1;
  string name = 2;
  string phone = 3;
  string email = 4;
  repeated string rolesId = 5;
  bool isActive = 6;
}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {
  bool success = 1;
}

message GetAllUserRequest {
  int32 page = 1;
  int32 limit = 2;
  string search = 3;
}

message GetAllUserResponse {
  repeated User users = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
}

// Authorization
message CheckPermissionRequest {
  string userId = 1;
  string resource = 2;
  string action = 3;
}

message CheckPermissionResponse {
  bool hasPermission = 1;
}

message Permission {
  string id = 1;
  string name = 2;
  string resource = 3;
  string action = 4;
  string displayName = 5;
  string description = 6;
  bool isActive = 7;
}

message GetUserPermissionsRequest {
  string userId = 1;
}

message GetUserPermissionsResponse {
  repeated Permission permissions = 1;
}

message Role {
  string id = 1;
  string name = 2;
  string displayName = 3;
  string description = 4;
  bool isActive = 5;
  bool isSystem = 6;
}

message CheckRoleRequest {
  string userId = 1;
  repeated string roleNames = 2;
  bool requireAll = 3;
}

message CheckRoleResponse {
  bool hasRole = 1;
}

message GetUserRolesRequest {
  string userId = 1;
}

message GetUserRolesResponse {
  repeated Role roles = 1;
}

// Role Management
message AssignRoleToUserRequest {
  string userId = 1;
  string roleId = 2;
  string assignedBy = 3;
  string expiresAt = 4;
}

message AssignRoleToUserResponse {
  string userRoleId = 1;
}

message RemoveRoleFromUserRequest {
  string userId = 1;
  string roleId = 2;
}

message RemoveRoleFromUserResponse {
  bool success = 1;
}

message AssignPermissionToRoleRequest {
  string roleId = 1;
  string permissionId = 2;
}

message AssignPermissionToRoleResponse {
  string rolePermissionId = 1;
}

message RemovePermissionFromRoleRequest {
  string roleId = 1;
  string permissionId = 2;
}

message RemovePermissionFromRoleResponse {
  bool success = 1;
}

message CreateRoleRequest {
  string name = 1;
  string displayName = 2;
  string description = 3;
  bool isActive = 4;
  bool isSystem = 5;
}

message RoleResponse {
  Role role = 1;
}

message UpdateRoleRequest {
  string id = 1;
  string name = 2;
  string displayName = 3;
  string description = 4;
  bool isActive = 5;
}

message DeleteRoleRequest {
  string id = 1;
}

message DeleteRoleResponse {
  bool success = 1;
}

message GetAllRolesRequest {}

message GetAllRolesResponse {
  repeated Role roles = 1;
}

// Permission Management
message CreatePermissionRequest {
  string name = 1;
  string resource = 2;
  string action = 3;
  string displayName = 4;
  string description = 5;
  bool isActive = 6;
}

message PermissionResponse {
  Permission permission = 1;
}

message UpdatePermissionRequest {
  string id = 1;
  string name = 2;
  string resource = 3;
  string action = 4;
  string displayName = 5;
  string description = 6;
  bool isActive = 7;
}

message DeletePermissionRequest {
  string id = 1;
}

message DeletePermissionResponse {
  bool success = 1;
}

message GetAllPermissionsRequest {}

message GetAllPermissionsResponse {
  repeated Permission permissions = 1;
}
