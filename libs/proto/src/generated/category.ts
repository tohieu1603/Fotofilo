// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "category";

export interface Category {
  id: string;
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
  deletedAt: string;
  children: Category[];
}

export interface CreateCategoryRequest {
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface GetCategoryRequest {
  id: string;
}

export interface ListCategoriesRequest {
  keyword: string;
  active: boolean;
  page: number;
  limit: number;
}

export interface CategoryResponse {
  id: string;
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
}

export interface CategoryListResponse {
  categories: Category[];
  total: number;
}

function createBaseCategory(): Category {
  return { id: "", name: "", slug: "", image: "", active: false, parentId: "", deletedAt: "", children: [] };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    if (message.parentId !== "") {
      writer.uint32(50).string(message.parentId);
    }
    if (message.deletedAt !== "") {
      writer.uint32(58).string(message.deletedAt);
    }
    for (const v of message.children) {
      Category.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.children.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Category {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : "",
      children: globalThis.Array.isArray(object?.children) ? object.children.map((e: any) => Category.fromJSON(e)) : [],
    };
  },

  toJSON(message: Category): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    if (message.deletedAt !== "") {
      obj.deletedAt = message.deletedAt;
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => Category.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Category>, I>>(base?: I): Category {
    return Category.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Category>, I>>(object: I): Category {
    const message = createBaseCategory();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.image = object.image ?? "";
    message.active = object.active ?? false;
    message.parentId = object.parentId ?? "";
    message.deletedAt = object.deletedAt ?? "";
    message.children = object.children?.map((e) => Category.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateCategoryRequest(): CreateCategoryRequest {
  return { name: "", slug: "", image: "", active: false, parentId: "" };
}

export const CreateCategoryRequest: MessageFns<CreateCategoryRequest> = {
  encode(message: CreateCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    if (message.parentId !== "") {
      writer.uint32(42).string(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCategoryRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
    };
  },

  toJSON(message: CreateCategoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCategoryRequest>, I>>(base?: I): CreateCategoryRequest {
    return CreateCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCategoryRequest>, I>>(object: I): CreateCategoryRequest {
    const message = createBaseCreateCategoryRequest();
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.image = object.image ?? "";
    message.active = object.active ?? false;
    message.parentId = object.parentId ?? "";
    return message;
  },
};

function createBaseUpdateCategoryRequest(): UpdateCategoryRequest {
  return { id: "", name: "", slug: "", image: "", active: false, parentId: "" };
}

export const UpdateCategoryRequest: MessageFns<UpdateCategoryRequest> = {
  encode(message: UpdateCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    if (message.parentId !== "") {
      writer.uint32(50).string(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCategoryRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
    };
  },

  toJSON(message: UpdateCategoryRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCategoryRequest>, I>>(base?: I): UpdateCategoryRequest {
    return UpdateCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCategoryRequest>, I>>(object: I): UpdateCategoryRequest {
    const message = createBaseUpdateCategoryRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.image = object.image ?? "";
    message.active = object.active ?? false;
    message.parentId = object.parentId ?? "";
    return message;
  },
};

function createBaseDeleteCategoryRequest(): DeleteCategoryRequest {
  return { id: "" };
}

export const DeleteCategoryRequest: MessageFns<DeleteCategoryRequest> = {
  encode(message: DeleteCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCategoryRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteCategoryRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCategoryRequest>, I>>(base?: I): DeleteCategoryRequest {
    return DeleteCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCategoryRequest>, I>>(object: I): DeleteCategoryRequest {
    const message = createBaseDeleteCategoryRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetCategoryRequest(): GetCategoryRequest {
  return { id: "" };
}

export const GetCategoryRequest: MessageFns<GetCategoryRequest> = {
  encode(message: GetCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCategoryRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetCategoryRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCategoryRequest>, I>>(base?: I): GetCategoryRequest {
    return GetCategoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCategoryRequest>, I>>(object: I): GetCategoryRequest {
    const message = createBaseGetCategoryRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListCategoriesRequest(): ListCategoriesRequest {
  return { keyword: "", active: false, page: 0, limit: 0 };
}

export const ListCategoriesRequest: MessageFns<ListCategoriesRequest> = {
  encode(message: ListCategoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyword !== "") {
      writer.uint32(26).string(message.keyword);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCategoriesRequest {
    return {
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListCategoriesRequest): unknown {
    const obj: any = {};
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCategoriesRequest>, I>>(base?: I): ListCategoriesRequest {
    return ListCategoriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCategoriesRequest>, I>>(object: I): ListCategoriesRequest {
    const message = createBaseListCategoriesRequest();
    message.keyword = object.keyword ?? "";
    message.active = object.active ?? false;
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseCategoryResponse(): CategoryResponse {
  return { id: "", name: "", slug: "", image: "", active: false, parentId: "" };
}

export const CategoryResponse: MessageFns<CategoryResponse> = {
  encode(message: CategoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    if (message.parentId !== "") {
      writer.uint32(50).string(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
    };
  },

  toJSON(message: CategoryResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryResponse>, I>>(base?: I): CategoryResponse {
    return CategoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryResponse>, I>>(object: I): CategoryResponse {
    const message = createBaseCategoryResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.slug = object.slug ?? "";
    message.image = object.image ?? "";
    message.active = object.active ?? false;
    message.parentId = object.parentId ?? "";
    return message;
  },
};

function createBaseCategoryListResponse(): CategoryListResponse {
  return { categories: [], total: 0 };
}

export const CategoryListResponse: MessageFns<CategoryListResponse> = {
  encode(message: CategoryListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryListResponse {
    return {
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => Category.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: CategoryListResponse): unknown {
    const obj: any = {};
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => Category.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CategoryListResponse>, I>>(base?: I): CategoryListResponse {
    return CategoryListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CategoryListResponse>, I>>(object: I): CategoryListResponse {
    const message = createBaseCategoryListResponse();
    message.categories = object.categories?.map((e) => Category.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export interface CategoryService {
  CreateCategory(request: CreateCategoryRequest): Promise<CategoryResponse>;
  UpdateCategory(request: UpdateCategoryRequest): Promise<CategoryResponse>;
  DeleteCategory(request: DeleteCategoryRequest): Promise<CategoryResponse>;
  GetCategory(request: GetCategoryRequest): Promise<CategoryResponse>;
  ListCategories(request: ListCategoriesRequest): Promise<CategoryListResponse>;
}

export const CategoryServiceServiceName = "category.CategoryService";
export class CategoryServiceClientImpl implements CategoryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CategoryServiceServiceName;
    this.rpc = rpc;
    this.CreateCategory = this.CreateCategory.bind(this);
    this.UpdateCategory = this.UpdateCategory.bind(this);
    this.DeleteCategory = this.DeleteCategory.bind(this);
    this.GetCategory = this.GetCategory.bind(this);
    this.ListCategories = this.ListCategories.bind(this);
  }
  CreateCategory(request: CreateCategoryRequest): Promise<CategoryResponse> {
    const data = CreateCategoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCategory", data);
    return promise.then((data) => CategoryResponse.decode(new BinaryReader(data)));
  }

  UpdateCategory(request: UpdateCategoryRequest): Promise<CategoryResponse> {
    const data = UpdateCategoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCategory", data);
    return promise.then((data) => CategoryResponse.decode(new BinaryReader(data)));
  }

  DeleteCategory(request: DeleteCategoryRequest): Promise<CategoryResponse> {
    const data = DeleteCategoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteCategory", data);
    return promise.then((data) => CategoryResponse.decode(new BinaryReader(data)));
  }

  GetCategory(request: GetCategoryRequest): Promise<CategoryResponse> {
    const data = GetCategoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCategory", data);
    return promise.then((data) => CategoryResponse.decode(new BinaryReader(data)));
  }

  ListCategories(request: ListCategoriesRequest): Promise<CategoryListResponse> {
    const data = ListCategoriesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListCategories", data);
    return promise.then((data) => CategoryListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
