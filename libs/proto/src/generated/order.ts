// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "order";

export interface OrderItem {
  skuId: string;
  skuCode: string;
  quantity: number;
  price: number;
  productId: string;
  productName: string;
  productImage: string;
}

export interface CreateOrderRequest {
  userId: string;
  receiverName: string;
  receiverPhone: string;
  address: string;
  ward: string;
  district: string;
  city: string;
  /** cod, momo, etc. */
  paymentMethod: string;
  shippingFee: number;
  discount: number;
  note: string;
  items: OrderItem[];
}

export interface GetOrderByIdRequest {
  orderId: string;
}

export interface ListOrdersByUserRequest {
  userId: string;
}

export interface OrderDetail {
  id: string;
  skuId: string;
  skuCode: string;
  quantity: number;
  price: number;
  totalPrice: number;
  productId: string;
  productName: string;
  productImage: string;
}

export interface OrderResponse {
  id: string;
  userId: string;
  code: string;
  status: string;
  totalAmount: number;
  paymentMethod: string;
  paymentStatus: string;
  shippingFee: number;
  discount: number;
  note: string;
  receiverName: string;
  receiverPhone: string;
  address: string;
  ward: string;
  district: string;
  city: string;
  orderDetails: OrderDetail[];
  createdAt: string;
  updatedAt: string;
}

export interface OrderListResponse {
  orders: OrderResponse[];
}

function createBaseOrderItem(): OrderItem {
  return { skuId: "", skuCode: "", quantity: 0, price: 0, productId: "", productName: "", productImage: "" };
}

export const OrderItem: MessageFns<OrderItem> = {
  encode(message: OrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skuId !== "") {
      writer.uint32(10).string(message.skuId);
    }
    if (message.skuCode !== "") {
      writer.uint32(18).string(message.skuCode);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.productName !== "") {
      writer.uint32(50).string(message.productName);
    }
    if (message.productImage !== "") {
      writer.uint32(58).string(message.productImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skuId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skuCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productImage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      skuId: isSet(object.skuId) ? globalThis.String(object.skuId) : "",
      skuCode: isSet(object.skuCode) ? globalThis.String(object.skuCode) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      productImage: isSet(object.productImage) ? globalThis.String(object.productImage) : "",
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.skuId !== "") {
      obj.skuId = message.skuId;
    }
    if (message.skuCode !== "") {
      obj.skuCode = message.skuCode;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.productImage !== "") {
      obj.productImage = message.productImage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.skuId = object.skuId ?? "";
    message.skuCode = object.skuCode ?? "";
    message.quantity = object.quantity ?? 0;
    message.price = object.price ?? 0;
    message.productId = object.productId ?? "";
    message.productName = object.productName ?? "";
    message.productImage = object.productImage ?? "";
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return {
    userId: "",
    receiverName: "",
    receiverPhone: "",
    address: "",
    ward: "",
    district: "",
    city: "",
    paymentMethod: "",
    shippingFee: 0,
    discount: 0,
    note: "",
    items: [],
  };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.receiverName !== "") {
      writer.uint32(18).string(message.receiverName);
    }
    if (message.receiverPhone !== "") {
      writer.uint32(26).string(message.receiverPhone);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    if (message.ward !== "") {
      writer.uint32(42).string(message.ward);
    }
    if (message.district !== "") {
      writer.uint32(50).string(message.district);
    }
    if (message.city !== "") {
      writer.uint32(58).string(message.city);
    }
    if (message.paymentMethod !== "") {
      writer.uint32(66).string(message.paymentMethod);
    }
    if (message.shippingFee !== 0) {
      writer.uint32(73).double(message.shippingFee);
    }
    if (message.discount !== 0) {
      writer.uint32(81).double(message.discount);
    }
    if (message.note !== "") {
      writer.uint32(90).string(message.note);
    }
    for (const v of message.items) {
      OrderItem.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiverName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.receiverPhone = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ward = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.district = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.shippingFee = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.discount = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.items.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      receiverName: isSet(object.receiverName) ? globalThis.String(object.receiverName) : "",
      receiverPhone: isSet(object.receiverPhone) ? globalThis.String(object.receiverPhone) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      ward: isSet(object.ward) ? globalThis.String(object.ward) : "",
      district: isSet(object.district) ? globalThis.String(object.district) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : "",
      shippingFee: isSet(object.shippingFee) ? globalThis.Number(object.shippingFee) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => OrderItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.receiverName !== "") {
      obj.receiverName = message.receiverName;
    }
    if (message.receiverPhone !== "") {
      obj.receiverPhone = message.receiverPhone;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.ward !== "") {
      obj.ward = message.ward;
    }
    if (message.district !== "") {
      obj.district = message.district;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.paymentMethod !== "") {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.shippingFee !== 0) {
      obj.shippingFee = message.shippingFee;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.userId = object.userId ?? "";
    message.receiverName = object.receiverName ?? "";
    message.receiverPhone = object.receiverPhone ?? "";
    message.address = object.address ?? "";
    message.ward = object.ward ?? "";
    message.district = object.district ?? "";
    message.city = object.city ?? "";
    message.paymentMethod = object.paymentMethod ?? "";
    message.shippingFee = object.shippingFee ?? 0;
    message.discount = object.discount ?? 0;
    message.note = object.note ?? "";
    message.items = object.items?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrderByIdRequest(): GetOrderByIdRequest {
  return { orderId: "" };
}

export const GetOrderByIdRequest: MessageFns<GetOrderByIdRequest> = {
  encode(message: GetOrderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderByIdRequest {
    return { orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "" };
  },

  toJSON(message: GetOrderByIdRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderByIdRequest>, I>>(base?: I): GetOrderByIdRequest {
    return GetOrderByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderByIdRequest>, I>>(object: I): GetOrderByIdRequest {
    const message = createBaseGetOrderByIdRequest();
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBaseListOrdersByUserRequest(): ListOrdersByUserRequest {
  return { userId: "" };
}

export const ListOrdersByUserRequest: MessageFns<ListOrdersByUserRequest> = {
  encode(message: ListOrdersByUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersByUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersByUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersByUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ListOrdersByUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersByUserRequest>, I>>(base?: I): ListOrdersByUserRequest {
    return ListOrdersByUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersByUserRequest>, I>>(object: I): ListOrdersByUserRequest {
    const message = createBaseListOrdersByUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseOrderDetail(): OrderDetail {
  return {
    id: "",
    skuId: "",
    skuCode: "",
    quantity: 0,
    price: 0,
    totalPrice: 0,
    productId: "",
    productName: "",
    productImage: "",
  };
}

export const OrderDetail: MessageFns<OrderDetail> = {
  encode(message: OrderDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.skuId !== "") {
      writer.uint32(18).string(message.skuId);
    }
    if (message.skuCode !== "") {
      writer.uint32(26).string(message.skuCode);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.totalPrice !== 0) {
      writer.uint32(49).double(message.totalPrice);
    }
    if (message.productId !== "") {
      writer.uint32(58).string(message.productId);
    }
    if (message.productName !== "") {
      writer.uint32(66).string(message.productName);
    }
    if (message.productImage !== "") {
      writer.uint32(74).string(message.productImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skuId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skuCode = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.totalPrice = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productImage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderDetail {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      skuId: isSet(object.skuId) ? globalThis.String(object.skuId) : "",
      skuCode: isSet(object.skuCode) ? globalThis.String(object.skuCode) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      totalPrice: isSet(object.totalPrice) ? globalThis.Number(object.totalPrice) : 0,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      productImage: isSet(object.productImage) ? globalThis.String(object.productImage) : "",
    };
  },

  toJSON(message: OrderDetail): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.skuId !== "") {
      obj.skuId = message.skuId;
    }
    if (message.skuCode !== "") {
      obj.skuCode = message.skuCode;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.totalPrice !== 0) {
      obj.totalPrice = message.totalPrice;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.productImage !== "") {
      obj.productImage = message.productImage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderDetail>, I>>(base?: I): OrderDetail {
    return OrderDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderDetail>, I>>(object: I): OrderDetail {
    const message = createBaseOrderDetail();
    message.id = object.id ?? "";
    message.skuId = object.skuId ?? "";
    message.skuCode = object.skuCode ?? "";
    message.quantity = object.quantity ?? 0;
    message.price = object.price ?? 0;
    message.totalPrice = object.totalPrice ?? 0;
    message.productId = object.productId ?? "";
    message.productName = object.productName ?? "";
    message.productImage = object.productImage ?? "";
    return message;
  },
};

function createBaseOrderResponse(): OrderResponse {
  return {
    id: "",
    userId: "",
    code: "",
    status: "",
    totalAmount: 0,
    paymentMethod: "",
    paymentStatus: "",
    shippingFee: 0,
    discount: 0,
    note: "",
    receiverName: "",
    receiverPhone: "",
    address: "",
    ward: "",
    district: "",
    city: "",
    orderDetails: [],
    createdAt: "",
    updatedAt: "",
  };
}

export const OrderResponse: MessageFns<OrderResponse> = {
  encode(message: OrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.totalAmount !== 0) {
      writer.uint32(41).double(message.totalAmount);
    }
    if (message.paymentMethod !== "") {
      writer.uint32(50).string(message.paymentMethod);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(58).string(message.paymentStatus);
    }
    if (message.shippingFee !== 0) {
      writer.uint32(65).double(message.shippingFee);
    }
    if (message.discount !== 0) {
      writer.uint32(73).double(message.discount);
    }
    if (message.note !== "") {
      writer.uint32(82).string(message.note);
    }
    if (message.receiverName !== "") {
      writer.uint32(90).string(message.receiverName);
    }
    if (message.receiverPhone !== "") {
      writer.uint32(98).string(message.receiverPhone);
    }
    if (message.address !== "") {
      writer.uint32(106).string(message.address);
    }
    if (message.ward !== "") {
      writer.uint32(114).string(message.ward);
    }
    if (message.district !== "") {
      writer.uint32(122).string(message.district);
    }
    if (message.city !== "") {
      writer.uint32(130).string(message.city);
    }
    for (const v of message.orderDetails) {
      OrderDetail.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.createdAt !== "") {
      writer.uint32(146).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(154).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.totalAmount = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.shippingFee = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.discount = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.receiverName = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.receiverPhone = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.ward = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.district = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.orderDetails.push(OrderDetail.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : 0,
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
      shippingFee: isSet(object.shippingFee) ? globalThis.Number(object.shippingFee) : 0,
      discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      receiverName: isSet(object.receiverName) ? globalThis.String(object.receiverName) : "",
      receiverPhone: isSet(object.receiverPhone) ? globalThis.String(object.receiverPhone) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      ward: isSet(object.ward) ? globalThis.String(object.ward) : "",
      district: isSet(object.district) ? globalThis.String(object.district) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      orderDetails: globalThis.Array.isArray(object?.orderDetails)
        ? object.orderDetails.map((e: any) => OrderDetail.fromJSON(e))
        : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: OrderResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.totalAmount !== 0) {
      obj.totalAmount = message.totalAmount;
    }
    if (message.paymentMethod !== "") {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    if (message.shippingFee !== 0) {
      obj.shippingFee = message.shippingFee;
    }
    if (message.discount !== 0) {
      obj.discount = message.discount;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.receiverName !== "") {
      obj.receiverName = message.receiverName;
    }
    if (message.receiverPhone !== "") {
      obj.receiverPhone = message.receiverPhone;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.ward !== "") {
      obj.ward = message.ward;
    }
    if (message.district !== "") {
      obj.district = message.district;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.orderDetails?.length) {
      obj.orderDetails = message.orderDetails.map((e) => OrderDetail.toJSON(e));
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderResponse>, I>>(base?: I): OrderResponse {
    return OrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderResponse>, I>>(object: I): OrderResponse {
    const message = createBaseOrderResponse();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.code = object.code ?? "";
    message.status = object.status ?? "";
    message.totalAmount = object.totalAmount ?? 0;
    message.paymentMethod = object.paymentMethod ?? "";
    message.paymentStatus = object.paymentStatus ?? "";
    message.shippingFee = object.shippingFee ?? 0;
    message.discount = object.discount ?? 0;
    message.note = object.note ?? "";
    message.receiverName = object.receiverName ?? "";
    message.receiverPhone = object.receiverPhone ?? "";
    message.address = object.address ?? "";
    message.ward = object.ward ?? "";
    message.district = object.district ?? "";
    message.city = object.city ?? "";
    message.orderDetails = object.orderDetails?.map((e) => OrderDetail.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseOrderListResponse(): OrderListResponse {
  return { orders: [] };
}

export const OrderListResponse: MessageFns<OrderListResponse> = {
  encode(message: OrderListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      OrderResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(OrderResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderListResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => OrderResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: OrderListResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => OrderResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderListResponse>, I>>(base?: I): OrderListResponse {
    return OrderListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderListResponse>, I>>(object: I): OrderListResponse {
    const message = createBaseOrderListResponse();
    message.orders = object.orders?.map((e) => OrderResponse.fromPartial(e)) || [];
    return message;
  },
};

export interface OrderService {
  CreateOrder(request: CreateOrderRequest): Promise<OrderResponse>;
  GetOrderById(request: GetOrderByIdRequest): Promise<OrderResponse>;
  ListOrdersByUser(request: ListOrdersByUserRequest): Promise<OrderListResponse>;
}

export const OrderServiceServiceName = "order.OrderService";
export class OrderServiceClientImpl implements OrderService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || OrderServiceServiceName;
    this.rpc = rpc;
    this.CreateOrder = this.CreateOrder.bind(this);
    this.GetOrderById = this.GetOrderById.bind(this);
    this.ListOrdersByUser = this.ListOrdersByUser.bind(this);
  }
  CreateOrder(request: CreateOrderRequest): Promise<OrderResponse> {
    const data = CreateOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrder", data);
    return promise.then((data) => OrderResponse.decode(new BinaryReader(data)));
  }

  GetOrderById(request: GetOrderByIdRequest): Promise<OrderResponse> {
    const data = GetOrderByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrderById", data);
    return promise.then((data) => OrderResponse.decode(new BinaryReader(data)));
  }

  ListOrdersByUser(request: ListOrdersByUserRequest): Promise<OrderListResponse> {
    const data = ListOrdersByUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListOrdersByUser", data);
    return promise.then((data) => OrderListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
