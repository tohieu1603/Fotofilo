// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "product";

/** ----- Create Product ----- */
export interface CreateProductRequest {
  name: string;
  description: string;
  brandId: string;
  categoryId: string;
  skus: CreateSkuInput[];
}

export interface CreateSkuInput {
  skuCode: string;
  price: number;
  stock: number;
  attributes: AttributeInput[];
}

export interface AttributeInput {
  attributeOptionId: string;
}

export interface CreateProductResponse {
  id: string;
  name: string;
}

/** ----- Get Product ----- */
export interface GetProductRequest {
  id: string;
  userId?: string | undefined;
}

export interface GetProductResponse {
  id: string;
  name: string;
  description?: string;
  brandId?: string;
  categoryId?: string;
  skus: SkuResponse[];
}

/** ----- Get Product SKU ----- */
export interface GetProductSkuRequest {
  id: string;
}

export interface ListSkuRequest {
  skuIds: string[];
}

export interface ListSkuResponse {
  skus: SkuResponse[];
}

export interface GetProductSkuResponse {
  id: string;
  name: string;
  description: string;
  brandId: string;
  categoryId: string;
  skus: SkuResponse[];
}

/** ----- Update Product ----- */
export interface UpdateProductRequest {
  id: string;
  name: string;
  description: string;
  brandId: string;
  categoryId: string;
  /** reuse input from Create */
  skus: CreateSkuInput[];
}

export interface UpdateProductResponse {
  id: string;
  name: string;
}

/** ----- Delete Product ----- */
export interface DeleteProductRequest {
  id: string;
}

export interface DeleteProductResponse {
  message: boolean;
}

/** ----- Get All Products ----- */
export interface GetAllProductsRequest {
  page: number;
  limit: number;
  keyword: string;
  brandId: string;
  categoryId: string;
  sort: string;
}

export interface GetAllProductsResponse {
  products: GetProductResponse[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

/** ----- SKU Details ----- */
export interface SkuResponse {
  id: string;
  skuCode: string;
  price: number;
  stock: number;
  skuOptions: SkuOptionResponse[];
}

export interface SkuOptionResponse {
  attributeOptionId: string;
  attributeOptionValue: string;
  attribute?: AttributeDetail | undefined;
}

export interface AttributeDetail {
  id: string;
  name: string;
  description: string;
}

/** ----- SKU Validation ----- */
export interface SkuValidationInput {
  skuId: string;
  skuCode: string;
  productId: string;
}

export interface ValidateSkuInputRequest {
  items: SkuValidationInput[];
}

export interface ValidateSkuInputResponse {
  valid: boolean;
  invalidSkuCodes: string[];
}

function createBaseCreateProductRequest(): CreateProductRequest {
  return { name: "", description: "", brandId: "", categoryId: "", skus: [] };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.brandId !== "") {
      writer.uint32(26).string(message.brandId);
    }
    if (message.categoryId !== "") {
      writer.uint32(34).string(message.categoryId);
    }
    for (const v of message.skus) {
      CreateSkuInput.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skus.push(CreateSkuInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => CreateSkuInput.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => CreateSkuInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductRequest>, I>>(base?: I): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductRequest>, I>>(object: I): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.brandId = object.brandId ?? "";
    message.categoryId = object.categoryId ?? "";
    message.skus = object.skus?.map((e) => CreateSkuInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateSkuInput(): CreateSkuInput {
  return { skuCode: "", price: 0, stock: 0, attributes: [] };
}

export const CreateSkuInput: MessageFns<CreateSkuInput> = {
  encode(message: CreateSkuInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skuCode !== "") {
      writer.uint32(10).string(message.skuCode);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(24).int32(message.stock);
    }
    for (const v of message.attributes) {
      AttributeInput.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSkuInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSkuInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skuCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attributes.push(AttributeInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSkuInput {
    return {
      skuCode: isSet(object.skuCode) ? globalThis.String(object.skuCode) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => AttributeInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateSkuInput): unknown {
    const obj: any = {};
    if (message.skuCode !== "") {
      obj.skuCode = message.skuCode;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.stock !== 0) {
      obj.stock = Math.round(message.stock);
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => AttributeInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSkuInput>, I>>(base?: I): CreateSkuInput {
    return CreateSkuInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSkuInput>, I>>(object: I): CreateSkuInput {
    const message = createBaseCreateSkuInput();
    message.skuCode = object.skuCode ?? "";
    message.price = object.price ?? 0;
    message.stock = object.stock ?? 0;
    message.attributes = object.attributes?.map((e) => AttributeInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttributeInput(): AttributeInput {
  return { attributeOptionId: "" };
}

export const AttributeInput: MessageFns<AttributeInput> = {
  encode(message: AttributeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeOptionId !== "") {
      writer.uint32(10).string(message.attributeOptionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeOptionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeInput {
    return { attributeOptionId: isSet(object.attributeOptionId) ? globalThis.String(object.attributeOptionId) : "" };
  },

  toJSON(message: AttributeInput): unknown {
    const obj: any = {};
    if (message.attributeOptionId !== "") {
      obj.attributeOptionId = message.attributeOptionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributeInput>, I>>(base?: I): AttributeInput {
    return AttributeInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributeInput>, I>>(object: I): AttributeInput {
    const message = createBaseAttributeInput();
    message.attributeOptionId = object.attributeOptionId ?? "";
    return message;
  },
};

function createBaseCreateProductResponse(): CreateProductResponse {
  return { id: "", name: "" };
}

export const CreateProductResponse: MessageFns<CreateProductResponse> = {
  encode(message: CreateProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateProductResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductResponse>, I>>(base?: I): CreateProductResponse {
    return CreateProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductResponse>, I>>(object: I): CreateProductResponse {
    const message = createBaseCreateProductResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetProductRequest(): GetProductRequest {
  return { id: "", userId: undefined };
}

export const GetProductRequest: MessageFns<GetProductRequest> = {
  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== undefined) {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,
    };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductRequest>, I>>(base?: I): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductRequest>, I>>(object: I): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? undefined;
    return message;
  },
};

function createBaseGetProductResponse(): GetProductResponse {
  return { id: "", name: "", description: "", brandId: "", categoryId: "", skus: [] };
}

export const GetProductResponse: MessageFns<GetProductResponse> = {
  encode(message: GetProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.brandId !== "") {
      writer.uint32(34).string(message.brandId);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    for (const v of message.skus) {
      SkuResponse.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skus.push(SkuResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => SkuResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetProductResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => SkuResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductResponse>, I>>(base?: I): GetProductResponse {
    return GetProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductResponse>, I>>(object: I): GetProductResponse {
    const message = createBaseGetProductResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.brandId = object.brandId ?? "";
    message.categoryId = object.categoryId ?? "";
    message.skus = object.skus?.map((e) => SkuResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProductSkuRequest(): GetProductSkuRequest {
  return { id: "" };
}

export const GetProductSkuRequest: MessageFns<GetProductSkuRequest> = {
  encode(message: GetProductSkuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductSkuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductSkuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductSkuRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetProductSkuRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductSkuRequest>, I>>(base?: I): GetProductSkuRequest {
    return GetProductSkuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductSkuRequest>, I>>(object: I): GetProductSkuRequest {
    const message = createBaseGetProductSkuRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListSkuRequest(): ListSkuRequest {
  return { skuIds: [] };
}

export const ListSkuRequest: MessageFns<ListSkuRequest> = {
  encode(message: ListSkuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.skuIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSkuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSkuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skuIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSkuRequest {
    return {
      skuIds: globalThis.Array.isArray(object?.skuIds) ? object.skuIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ListSkuRequest): unknown {
    const obj: any = {};
    if (message.skuIds?.length) {
      obj.skuIds = message.skuIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSkuRequest>, I>>(base?: I): ListSkuRequest {
    return ListSkuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSkuRequest>, I>>(object: I): ListSkuRequest {
    const message = createBaseListSkuRequest();
    message.skuIds = object.skuIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseListSkuResponse(): ListSkuResponse {
  return { skus: [] };
}

export const ListSkuResponse: MessageFns<ListSkuResponse> = {
  encode(message: ListSkuResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.skus) {
      SkuResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSkuResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSkuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skus.push(SkuResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSkuResponse {
    return { skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => SkuResponse.fromJSON(e)) : [] };
  },

  toJSON(message: ListSkuResponse): unknown {
    const obj: any = {};
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => SkuResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSkuResponse>, I>>(base?: I): ListSkuResponse {
    return ListSkuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSkuResponse>, I>>(object: I): ListSkuResponse {
    const message = createBaseListSkuResponse();
    message.skus = object.skus?.map((e) => SkuResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProductSkuResponse(): GetProductSkuResponse {
  return { id: "", name: "", description: "", brandId: "", categoryId: "", skus: [] };
}

export const GetProductSkuResponse: MessageFns<GetProductSkuResponse> = {
  encode(message: GetProductSkuResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.brandId !== "") {
      writer.uint32(34).string(message.brandId);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    for (const v of message.skus) {
      SkuResponse.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductSkuResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductSkuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skus.push(SkuResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductSkuResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => SkuResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetProductSkuResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => SkuResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductSkuResponse>, I>>(base?: I): GetProductSkuResponse {
    return GetProductSkuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductSkuResponse>, I>>(object: I): GetProductSkuResponse {
    const message = createBaseGetProductSkuResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.brandId = object.brandId ?? "";
    message.categoryId = object.categoryId ?? "";
    message.skus = object.skus?.map((e) => SkuResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateProductRequest(): UpdateProductRequest {
  return { id: "", name: "", description: "", brandId: "", categoryId: "", skus: [] };
}

export const UpdateProductRequest: MessageFns<UpdateProductRequest> = {
  encode(message: UpdateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.brandId !== "") {
      writer.uint32(34).string(message.brandId);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    for (const v of message.skus) {
      CreateSkuInput.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skus.push(CreateSkuInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => CreateSkuInput.fromJSON(e)) : [],
    };
  },

  toJSON(message: UpdateProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => CreateSkuInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(base?: I): UpdateProductRequest {
    return UpdateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(object: I): UpdateProductRequest {
    const message = createBaseUpdateProductRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.brandId = object.brandId ?? "";
    message.categoryId = object.categoryId ?? "";
    message.skus = object.skus?.map((e) => CreateSkuInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateProductResponse(): UpdateProductResponse {
  return { id: "", name: "" };
}

export const UpdateProductResponse: MessageFns<UpdateProductResponse> = {
  encode(message: UpdateProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: UpdateProductResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductResponse>, I>>(base?: I): UpdateProductResponse {
    return UpdateProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductResponse>, I>>(object: I): UpdateProductResponse {
    const message = createBaseUpdateProductResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteProductRequest(): DeleteProductRequest {
  return { id: "" };
}

export const DeleteProductRequest: MessageFns<DeleteProductRequest> = {
  encode(message: DeleteProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProductRequest>, I>>(base?: I): DeleteProductRequest {
    return DeleteProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProductRequest>, I>>(object: I): DeleteProductRequest {
    const message = createBaseDeleteProductRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteProductResponse(): DeleteProductResponse {
  return { message: false };
}

export const DeleteProductResponse: MessageFns<DeleteProductResponse> = {
  encode(message: DeleteProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== false) {
      writer.uint32(8).bool(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.message = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductResponse {
    return { message: isSet(object.message) ? globalThis.Boolean(object.message) : false };
  },

  toJSON(message: DeleteProductResponse): unknown {
    const obj: any = {};
    if (message.message !== false) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProductResponse>, I>>(base?: I): DeleteProductResponse {
    return DeleteProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProductResponse>, I>>(object: I): DeleteProductResponse {
    const message = createBaseDeleteProductResponse();
    message.message = object.message ?? false;
    return message;
  },
};

function createBaseGetAllProductsRequest(): GetAllProductsRequest {
  return { page: 0, limit: 0, keyword: "", brandId: "", categoryId: "", sort: "" };
}

export const GetAllProductsRequest: MessageFns<GetAllProductsRequest> = {
  encode(message: GetAllProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.keyword !== "") {
      writer.uint32(26).string(message.keyword);
    }
    if (message.brandId !== "") {
      writer.uint32(34).string(message.brandId);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    if (message.sort !== "") {
      writer.uint32(50).string(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllProductsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
    };
  },

  toJSON(message: GetAllProductsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllProductsRequest>, I>>(base?: I): GetAllProductsRequest {
    return GetAllProductsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllProductsRequest>, I>>(object: I): GetAllProductsRequest {
    const message = createBaseGetAllProductsRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.keyword = object.keyword ?? "";
    message.brandId = object.brandId ?? "";
    message.categoryId = object.categoryId ?? "";
    message.sort = object.sort ?? "";
    return message;
  },
};

function createBaseGetAllProductsResponse(): GetAllProductsResponse {
  return { products: [], total: 0, page: 0, limit: 0, totalPages: 0 };
}

export const GetAllProductsResponse: MessageFns<GetAllProductsResponse> = {
  encode(message: GetAllProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      GetProductResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    if (message.totalPages !== 0) {
      writer.uint32(40).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(GetProductResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => GetProductResponse.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: GetAllProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => GetProductResponse.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllProductsResponse>, I>>(base?: I): GetAllProductsResponse {
    return GetAllProductsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllProductsResponse>, I>>(object: I): GetAllProductsResponse {
    const message = createBaseGetAllProductsResponse();
    message.products = object.products?.map((e) => GetProductResponse.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseSkuResponse(): SkuResponse {
  return { id: "", skuCode: "", price: 0, stock: 0, skuOptions: [] };
}

export const SkuResponse: MessageFns<SkuResponse> = {
  encode(message: SkuResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.skuCode !== "") {
      writer.uint32(18).string(message.skuCode);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(32).int32(message.stock);
    }
    for (const v of message.skuOptions) {
      SkuOptionResponse.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkuResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skuCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skuOptions.push(SkuOptionResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SkuResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      skuCode: isSet(object.skuCode) ? globalThis.String(object.skuCode) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
      skuOptions: globalThis.Array.isArray(object?.skuOptions)
        ? object.skuOptions.map((e: any) => SkuOptionResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SkuResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.skuCode !== "") {
      obj.skuCode = message.skuCode;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.stock !== 0) {
      obj.stock = Math.round(message.stock);
    }
    if (message.skuOptions?.length) {
      obj.skuOptions = message.skuOptions.map((e) => SkuOptionResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SkuResponse>, I>>(base?: I): SkuResponse {
    return SkuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SkuResponse>, I>>(object: I): SkuResponse {
    const message = createBaseSkuResponse();
    message.id = object.id ?? "";
    message.skuCode = object.skuCode ?? "";
    message.price = object.price ?? 0;
    message.stock = object.stock ?? 0;
    message.skuOptions = object.skuOptions?.map((e) => SkuOptionResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSkuOptionResponse(): SkuOptionResponse {
  return { attributeOptionId: "", attributeOptionValue: "", attribute: undefined };
}

export const SkuOptionResponse: MessageFns<SkuOptionResponse> = {
  encode(message: SkuOptionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeOptionId !== "") {
      writer.uint32(10).string(message.attributeOptionId);
    }
    if (message.attributeOptionValue !== "") {
      writer.uint32(18).string(message.attributeOptionValue);
    }
    if (message.attribute !== undefined) {
      AttributeDetail.encode(message.attribute, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkuOptionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkuOptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeOptionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributeOptionValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attribute = AttributeDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SkuOptionResponse {
    return {
      attributeOptionId: isSet(object.attributeOptionId) ? globalThis.String(object.attributeOptionId) : "",
      attributeOptionValue: isSet(object.attributeOptionValue) ? globalThis.String(object.attributeOptionValue) : "",
      attribute: isSet(object.attribute) ? AttributeDetail.fromJSON(object.attribute) : undefined,
    };
  },

  toJSON(message: SkuOptionResponse): unknown {
    const obj: any = {};
    if (message.attributeOptionId !== "") {
      obj.attributeOptionId = message.attributeOptionId;
    }
    if (message.attributeOptionValue !== "") {
      obj.attributeOptionValue = message.attributeOptionValue;
    }
    if (message.attribute !== undefined) {
      obj.attribute = AttributeDetail.toJSON(message.attribute);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SkuOptionResponse>, I>>(base?: I): SkuOptionResponse {
    return SkuOptionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SkuOptionResponse>, I>>(object: I): SkuOptionResponse {
    const message = createBaseSkuOptionResponse();
    message.attributeOptionId = object.attributeOptionId ?? "";
    message.attributeOptionValue = object.attributeOptionValue ?? "";
    message.attribute = (object.attribute !== undefined && object.attribute !== null)
      ? AttributeDetail.fromPartial(object.attribute)
      : undefined;
    return message;
  },
};

function createBaseAttributeDetail(): AttributeDetail {
  return { id: "", name: "", description: "" };
}

export const AttributeDetail: MessageFns<AttributeDetail> = {
  encode(message: AttributeDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeDetail {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AttributeDetail): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributeDetail>, I>>(base?: I): AttributeDetail {
    return AttributeDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributeDetail>, I>>(object: I): AttributeDetail {
    const message = createBaseAttributeDetail();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseSkuValidationInput(): SkuValidationInput {
  return { skuId: "", skuCode: "", productId: "" };
}

export const SkuValidationInput: MessageFns<SkuValidationInput> = {
  encode(message: SkuValidationInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skuId !== "") {
      writer.uint32(10).string(message.skuId);
    }
    if (message.skuCode !== "") {
      writer.uint32(18).string(message.skuCode);
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkuValidationInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkuValidationInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skuId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skuCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SkuValidationInput {
    return {
      skuId: isSet(object.skuId) ? globalThis.String(object.skuId) : "",
      skuCode: isSet(object.skuCode) ? globalThis.String(object.skuCode) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: SkuValidationInput): unknown {
    const obj: any = {};
    if (message.skuId !== "") {
      obj.skuId = message.skuId;
    }
    if (message.skuCode !== "") {
      obj.skuCode = message.skuCode;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SkuValidationInput>, I>>(base?: I): SkuValidationInput {
    return SkuValidationInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SkuValidationInput>, I>>(object: I): SkuValidationInput {
    const message = createBaseSkuValidationInput();
    message.skuId = object.skuId ?? "";
    message.skuCode = object.skuCode ?? "";
    message.productId = object.productId ?? "";
    return message;
  },
};

function createBaseValidateSkuInputRequest(): ValidateSkuInputRequest {
  return { items: [] };
}

export const ValidateSkuInputRequest: MessageFns<ValidateSkuInputRequest> = {
  encode(message: ValidateSkuInputRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      SkuValidationInput.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateSkuInputRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateSkuInputRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(SkuValidationInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateSkuInputRequest {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => SkuValidationInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidateSkuInputRequest): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => SkuValidationInput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateSkuInputRequest>, I>>(base?: I): ValidateSkuInputRequest {
    return ValidateSkuInputRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateSkuInputRequest>, I>>(object: I): ValidateSkuInputRequest {
    const message = createBaseValidateSkuInputRequest();
    message.items = object.items?.map((e) => SkuValidationInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidateSkuInputResponse(): ValidateSkuInputResponse {
  return { valid: false, invalidSkuCodes: [] };
}

export const ValidateSkuInputResponse: MessageFns<ValidateSkuInputResponse> = {
  encode(message: ValidateSkuInputResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    for (const v of message.invalidSkuCodes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateSkuInputResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateSkuInputResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invalidSkuCodes.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateSkuInputResponse {
    return {
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      invalidSkuCodes: globalThis.Array.isArray(object?.invalidSkuCodes)
        ? object.invalidSkuCodes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ValidateSkuInputResponse): unknown {
    const obj: any = {};
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.invalidSkuCodes?.length) {
      obj.invalidSkuCodes = message.invalidSkuCodes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateSkuInputResponse>, I>>(base?: I): ValidateSkuInputResponse {
    return ValidateSkuInputResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateSkuInputResponse>, I>>(object: I): ValidateSkuInputResponse {
    const message = createBaseValidateSkuInputResponse();
    message.valid = object.valid ?? false;
    message.invalidSkuCodes = object.invalidSkuCodes?.map((e) => e) || [];
    return message;
  },
};

export interface ProductService {
  CreateProduct(request: CreateProductRequest): Promise<CreateProductResponse>;
  GetProduct(request: GetProductRequest): Promise<GetProductResponse>;
  GetProducts(request: GetAllProductsRequest): Promise<GetAllProductsResponse>;
  ValidateSkuInputs(request: ValidateSkuInputRequest): Promise<ValidateSkuInputResponse>;
  GetProductSku(request: GetProductSkuRequest): Promise<GetProductSkuResponse>;
  GetProductSkus(request: ListSkuRequest): Promise<ListSkuResponse>;
  UpdateProduct(request: UpdateProductRequest): Promise<UpdateProductResponse>;
  DeleteProduct(request: DeleteProductRequest): Promise<DeleteProductResponse>;
}

export const ProductServiceServiceName = "product.ProductService";
export class ProductServiceClientImpl implements ProductService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProductServiceServiceName;
    this.rpc = rpc;
    this.CreateProduct = this.CreateProduct.bind(this);
    this.GetProduct = this.GetProduct.bind(this);
    this.GetProducts = this.GetProducts.bind(this);
    this.ValidateSkuInputs = this.ValidateSkuInputs.bind(this);
    this.GetProductSku = this.GetProductSku.bind(this);
    this.GetProductSkus = this.GetProductSkus.bind(this);
    this.UpdateProduct = this.UpdateProduct.bind(this);
    this.DeleteProduct = this.DeleteProduct.bind(this);
  }
  CreateProduct(request: CreateProductRequest): Promise<CreateProductResponse> {
    const data = CreateProductRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProduct", data);
    return promise.then((data) => CreateProductResponse.decode(new BinaryReader(data)));
  }

  GetProduct(request: GetProductRequest): Promise<GetProductResponse> {
    const data = GetProductRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProduct", data);
    return promise.then((data) => GetProductResponse.decode(new BinaryReader(data)));
  }

  GetProducts(request: GetAllProductsRequest): Promise<GetAllProductsResponse> {
    const data = GetAllProductsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProducts", data);
    return promise.then((data) => GetAllProductsResponse.decode(new BinaryReader(data)));
  }

  ValidateSkuInputs(request: ValidateSkuInputRequest): Promise<ValidateSkuInputResponse> {
    const data = ValidateSkuInputRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateSkuInputs", data);
    return promise.then((data) => ValidateSkuInputResponse.decode(new BinaryReader(data)));
  }

  GetProductSku(request: GetProductSkuRequest): Promise<GetProductSkuResponse> {
    const data = GetProductSkuRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProductSku", data);
    return promise.then((data) => GetProductSkuResponse.decode(new BinaryReader(data)));
  }

  GetProductSkus(request: ListSkuRequest): Promise<ListSkuResponse> {
    const data = ListSkuRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProductSkus", data);
    return promise.then((data) => ListSkuResponse.decode(new BinaryReader(data)));
  }

  UpdateProduct(request: UpdateProductRequest): Promise<UpdateProductResponse> {
    const data = UpdateProductRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProduct", data);
    return promise.then((data) => UpdateProductResponse.decode(new BinaryReader(data)));
  }

  DeleteProduct(request: DeleteProductRequest): Promise<DeleteProductResponse> {
    const data = DeleteProductRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProduct", data);
    return promise.then((data) => DeleteProductResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
