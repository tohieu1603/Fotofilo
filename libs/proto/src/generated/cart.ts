// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: cart.proto

/* eslint-disable */
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import * as _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";

export const protobufPackage = "cart";

export interface AddToCartRequest {
  userId: string;
  skuId: string;
  quantity: number;
  price: number;
  itemDetail?: ItemDetail | undefined;
}

export interface AddToCartResponse {
  cart?: CartEntity | undefined;
  message: string;
}

export interface GetCartRequest {
  userId: string;
}

export interface GetCartResponse {
  cart?: CartEntity | undefined;
}

export interface CartEntity {
  id: string;
  userId: string;
  items: CartItemEntity[];
  createdAt: string;
  updatedAt: string;
}

export interface DeleteCartRequest {
  cartId: string;
}

export interface DeleteCartResponse {
  success: boolean;
}

export interface CartItemEntity {
  id: string;
  cartId: string;
  skuId: string;
  quantity: number;
  price: number;
  image: string;
  itemDetail?: ItemDetail | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface ItemDetail {
  name: string;
  description: string;
  brand: string;
  category: string;
  image: string;
  attributes: { [key: string]: string };
  variants: { [key: string]: string };
}

export interface ItemDetail_AttributesEntry {
  key: string;
  value: string;
}

export interface ItemDetail_VariantsEntry {
  key: string;
  value: string;
}

export const CART_PACKAGE_NAME = "cart";

function createBaseAddToCartRequest(): AddToCartRequest {
  return { userId: "", skuId: "", quantity: 0, price: 0 };
}

export const AddToCartRequest = {
  encode(message: AddToCartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.skuId !== "") {
      writer.uint32(18).string(message.skuId);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.itemDetail !== undefined) {
      ItemDetail.encode(message.itemDetail, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddToCartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.skuId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.itemDetail = ItemDetail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseAddToCartResponse(): AddToCartResponse {
  return { message: "" };
}

export const AddToCartResponse = {
  encode(message: AddToCartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cart !== undefined) {
      CartEntity.encode(message.cart, writer.uint32(10).fork()).ldelim();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddToCartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cart = CartEntity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseGetCartRequest(): GetCartRequest {
  return { userId: "" };
}

export const GetCartRequest = {
  encode(message: GetCartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseGetCartResponse(): GetCartResponse {
  return {};
}

export const GetCartResponse = {
  encode(message: GetCartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cart !== undefined) {
      CartEntity.encode(message.cart, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cart = CartEntity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseCartEntity(): CartEntity {
  return { id: "", userId: "", items: [], createdAt: "", updatedAt: "" };
}

export const CartEntity = {
  encode(message: CartEntity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.items) {
      CartItemEntity.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CartEntity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.items.push(CartItemEntity.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteCartRequest(): DeleteCartRequest {
  return { cartId: "" };
}

export const DeleteCartRequest = {
  encode(message: DeleteCartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cartId !== "") {
      writer.uint32(10).string(message.cartId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteCartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cartId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteCartResponse(): DeleteCartResponse {
  return { success: false };
}

export const DeleteCartResponse = {
  encode(message: DeleteCartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteCartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseCartItemEntity(): CartItemEntity {
  return { id: "", cartId: "", skuId: "", quantity: 0, price: 0, image: "", createdAt: "", updatedAt: "" };
}

export const CartItemEntity = {
  encode(message: CartItemEntity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.cartId !== "") {
      writer.uint32(18).string(message.cartId);
    }
    if (message.skuId !== "") {
      writer.uint32(26).string(message.skuId);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.image !== "") {
      writer.uint32(50).string(message.image);
    }
    if (message.itemDetail !== undefined) {
      ItemDetail.encode(message.itemDetail, writer.uint32(58).fork()).ldelim();
    }
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(74).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CartItemEntity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartItemEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cartId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.skuId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.image = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.itemDetail = ItemDetail.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseItemDetail(): ItemDetail {
  return { name: "", description: "", brand: "", category: "", image: "", attributes: {}, variants: {} };
}

export const ItemDetail = {
  encode(message: ItemDetail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.brand !== "") {
      writer.uint32(26).string(message.brand);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (message.image !== "") {
      writer.uint32(42).string(message.image);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      ItemDetail_AttributesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    Object.entries(message.variants).forEach(([key, value]) => {
      ItemDetail_VariantsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ItemDetail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.image = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = ItemDetail_AttributesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.attributes[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = ItemDetail_VariantsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.variants[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseItemDetail_AttributesEntry(): ItemDetail_AttributesEntry {
  return { key: "", value: "" };
}

export const ItemDetail_AttributesEntry = {
  encode(message: ItemDetail_AttributesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ItemDetail_AttributesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemDetail_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseItemDetail_VariantsEntry(): ItemDetail_VariantsEntry {
  return { key: "", value: "" };
}

export const ItemDetail_VariantsEntry = {
  encode(message: ItemDetail_VariantsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ItemDetail_VariantsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemDetail_VariantsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

export interface CartServiceClient {
  addToCart(request: AddToCartRequest, metadata: Metadata, ...rest: any): Observable<AddToCartResponse>;

  getCart(request: GetCartRequest, metadata: Metadata, ...rest: any): Observable<GetCartResponse>;

  deleteCart(request: DeleteCartRequest, metadata: Metadata, ...rest: any): Observable<DeleteCartResponse>;
}

export interface CartServiceController {
  addToCart(
    request: AddToCartRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<AddToCartResponse> | Observable<AddToCartResponse> | AddToCartResponse;

  getCart(
    request: GetCartRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<GetCartResponse> | Observable<GetCartResponse> | GetCartResponse;

  deleteCart(
    request: DeleteCartRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<DeleteCartResponse> | Observable<DeleteCartResponse> | DeleteCartResponse;
}

export function CartServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["addToCart", "getCart", "deleteCart"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CartService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CartService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CART_SERVICE_NAME = "CartService";

export type CartServiceService = typeof CartServiceService;
export const CartServiceService = {
  addToCart: {
    path: "/cart.CartService/AddToCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToCartRequest) => Buffer.from(AddToCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddToCartRequest.decode(value),
    responseSerialize: (value: AddToCartResponse) => Buffer.from(AddToCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddToCartResponse.decode(value),
  },
  getCart: {
    path: "/cart.CartService/GetCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCartRequest) => Buffer.from(GetCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCartRequest.decode(value),
    responseSerialize: (value: GetCartResponse) => Buffer.from(GetCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCartResponse.decode(value),
  },
  deleteCart: {
    path: "/cart.CartService/DeleteCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCartRequest) => Buffer.from(DeleteCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteCartRequest.decode(value),
    responseSerialize: (value: DeleteCartResponse) => Buffer.from(DeleteCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteCartResponse.decode(value),
  },
} as const;

export interface CartServiceServer extends UntypedServiceImplementation {
  addToCart: handleUnaryCall<AddToCartRequest, AddToCartResponse>;
  getCart: handleUnaryCall<GetCartRequest, GetCartResponse>;
  deleteCart: handleUnaryCall<DeleteCartRequest, DeleteCartResponse>;
}
