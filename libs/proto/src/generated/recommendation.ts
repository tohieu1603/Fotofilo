// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: recommendation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "recommendation";

/** Request khi người dùng xem chi tiết sản phẩm */
export interface RecommendationRequest {
  userId: string;
  /** ID của sản phẩm đang được xem */
  productId: string;
}

/** Thông tin chi tiết của một sản phẩm gợi ý */
export interface RecommendedProduct {
  productId: string;
  name: string;
  imageUrl: string;
  /** Điểm số gợi ý (tùy chọn) */
  score: number;
}

/** Phản hồi chứa danh sách các sản phẩm gợi ý */
export interface RecommendationResponse {
  products: RecommendedProduct[];
}

function createBaseRecommendationRequest(): RecommendationRequest {
  return { userId: "", productId: "" };
}

export const RecommendationRequest: MessageFns<RecommendationRequest> = {
  encode(message: RecommendationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendationRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: RecommendationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecommendationRequest>, I>>(base?: I): RecommendationRequest {
    return RecommendationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecommendationRequest>, I>>(object: I): RecommendationRequest {
    const message = createBaseRecommendationRequest();
    message.userId = object.userId ?? "";
    message.productId = object.productId ?? "";
    return message;
  },
};

function createBaseRecommendedProduct(): RecommendedProduct {
  return { productId: "", name: "", imageUrl: "", score: 0 };
}

export const RecommendedProduct: MessageFns<RecommendedProduct> = {
  encode(message: RecommendedProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    if (message.score !== 0) {
      writer.uint32(33).double(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendedProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendedProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.score = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendedProduct {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: RecommendedProduct): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecommendedProduct>, I>>(base?: I): RecommendedProduct {
    return RecommendedProduct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecommendedProduct>, I>>(object: I): RecommendedProduct {
    const message = createBaseRecommendedProduct();
    message.productId = object.productId ?? "";
    message.name = object.name ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseRecommendationResponse(): RecommendationResponse {
  return { products: [] };
}

export const RecommendationResponse: MessageFns<RecommendationResponse> = {
  encode(message: RecommendationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      RecommendedProduct.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(RecommendedProduct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendationResponse {
    return {
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => RecommendedProduct.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecommendationResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => RecommendedProduct.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecommendationResponse>, I>>(base?: I): RecommendationResponse {
    return RecommendationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecommendationResponse>, I>>(object: I): RecommendationResponse {
    const message = createBaseRecommendationResponse();
    message.products = object.products?.map((e) => RecommendedProduct.fromPartial(e)) || [];
    return message;
  },
};

/** Service để lấy gợi ý sản phẩm */
export interface RecommendationService {
  GetRecommendations(request: RecommendationRequest): Promise<RecommendationResponse>;
}

export const RecommendationServiceServiceName = "recommendation.RecommendationService";
export class RecommendationServiceClientImpl implements RecommendationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RecommendationServiceServiceName;
    this.rpc = rpc;
    this.GetRecommendations = this.GetRecommendations.bind(this);
  }
  GetRecommendations(request: RecommendationRequest): Promise<RecommendationResponse> {
    const data = RecommendationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRecommendations", data);
    return promise.then((data) => RecommendationResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
