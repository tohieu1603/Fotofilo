// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: recommendation.proto

/* eslint-disable */
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import * as _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";

export const protobufPackage = "recommendation";

/** Request khi người dùng xem chi tiết sản phẩm */
export interface RecommendationRequest {
  userId: string;
  /** ID của sản phẩm đang được xem */
  productId: string;
}

/** Thông tin chi tiết của một sản phẩm gợi ý */
export interface RecommendedProduct {
  productId: string;
  name: string;
  imageUrl: string;
  /** Điểm số gợi ý (tùy chọn) */
  score: number;
}

/** Phản hồi chứa danh sách các sản phẩm gợi ý */
export interface RecommendationResponse {
  products: RecommendedProduct[];
}

export const RECOMMENDATION_PACKAGE_NAME = "recommendation";

function createBaseRecommendationRequest(): RecommendationRequest {
  return { userId: "", productId: "" };
}

export const RecommendationRequest = {
  encode(message: RecommendationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecommendationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseRecommendedProduct(): RecommendedProduct {
  return { productId: "", name: "", imageUrl: "", score: 0 };
}

export const RecommendedProduct = {
  encode(message: RecommendedProduct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    if (message.score !== 0) {
      writer.uint32(33).double(message.score);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecommendedProduct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendedProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.score = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseRecommendationResponse(): RecommendationResponse {
  return { products: [] };
}

export const RecommendationResponse = {
  encode(message: RecommendationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.products) {
      RecommendedProduct.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecommendationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(RecommendedProduct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

/** Service để lấy gợi ý sản phẩm */

export interface RecommendationServiceClient {
  getRecommendations(
    request: RecommendationRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<RecommendationResponse>;
}

/** Service để lấy gợi ý sản phẩm */

export interface RecommendationServiceController {
  getRecommendations(
    request: RecommendationRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<RecommendationResponse> | Observable<RecommendationResponse> | RecommendationResponse;
}

export function RecommendationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getRecommendations"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RecommendationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RecommendationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RECOMMENDATION_SERVICE_NAME = "RecommendationService";

/** Service để lấy gợi ý sản phẩm */
export type RecommendationServiceService = typeof RecommendationServiceService;
export const RecommendationServiceService = {
  getRecommendations: {
    path: "/recommendation.RecommendationService/GetRecommendations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecommendationRequest) => Buffer.from(RecommendationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RecommendationRequest.decode(value),
    responseSerialize: (value: RecommendationResponse) => Buffer.from(RecommendationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RecommendationResponse.decode(value),
  },
} as const;

export interface RecommendationServiceServer extends UntypedServiceImplementation {
  getRecommendations: handleUnaryCall<RecommendationRequest, RecommendationResponse>;
}
