// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: brand.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "brand";

export interface Brand {
  id: string;
  name: string;
  active: boolean;
  deletedAt: string;
}

export interface CreateBrandRequest {
  name: string;
  active: boolean;
}

export interface UpdateBrandRequest {
  id: string;
  name: string;
  active: boolean;
}

export interface DeleteBrandRequest {
  id: string;
}

export interface GetBrandRequest {
  id: string;
}

export interface ListBrandRequest {
  keyword: string;
  page: number;
  limit: number;
}

export interface BrandResponse {
  id: string;
  name: string;
  active: boolean;
}

export interface BrandListResponse {
  brand: Brand[];
  total: number;
}

function createBaseBrand(): Brand {
  return { id: "", name: "", active: false, deletedAt: "" };
}

export const Brand: MessageFns<Brand> = {
  encode(message: Brand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    if (message.deletedAt !== "") {
      writer.uint32(58).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Brand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Brand {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : "",
    };
  },

  toJSON(message: Brand): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.deletedAt !== "") {
      obj.deletedAt = message.deletedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Brand>, I>>(base?: I): Brand {
    return Brand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Brand>, I>>(object: I): Brand {
    const message = createBaseBrand();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.active = object.active ?? false;
    message.deletedAt = object.deletedAt ?? "";
    return message;
  },
};

function createBaseCreateBrandRequest(): CreateBrandRequest {
  return { name: "", active: false };
}

export const CreateBrandRequest: MessageFns<CreateBrandRequest> = {
  encode(message: CreateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBrandRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: CreateBrandRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(base?: I): CreateBrandRequest {
    return CreateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(object: I): CreateBrandRequest {
    const message = createBaseCreateBrandRequest();
    message.name = object.name ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseUpdateBrandRequest(): UpdateBrandRequest {
  return { id: "", name: "", active: false };
}

export const UpdateBrandRequest: MessageFns<UpdateBrandRequest> = {
  encode(message: UpdateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBrandRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: UpdateBrandRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(base?: I): UpdateBrandRequest {
    return UpdateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(object: I): UpdateBrandRequest {
    const message = createBaseUpdateBrandRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseDeleteBrandRequest(): DeleteBrandRequest {
  return { id: "" };
}

export const DeleteBrandRequest: MessageFns<DeleteBrandRequest> = {
  encode(message: DeleteBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBrandRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteBrandRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBrandRequest>, I>>(base?: I): DeleteBrandRequest {
    return DeleteBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBrandRequest>, I>>(object: I): DeleteBrandRequest {
    const message = createBaseDeleteBrandRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetBrandRequest(): GetBrandRequest {
  return { id: "" };
}

export const GetBrandRequest: MessageFns<GetBrandRequest> = {
  encode(message: GetBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBrandRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetBrandRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBrandRequest>, I>>(base?: I): GetBrandRequest {
    return GetBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBrandRequest>, I>>(object: I): GetBrandRequest {
    const message = createBaseGetBrandRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListBrandRequest(): ListBrandRequest {
  return { keyword: "", page: 0, limit: 0 };
}

export const ListBrandRequest: MessageFns<ListBrandRequest> = {
  encode(message: ListBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyword !== "") {
      writer.uint32(26).string(message.keyword);
    }
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBrandRequest {
    return {
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListBrandRequest): unknown {
    const obj: any = {};
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBrandRequest>, I>>(base?: I): ListBrandRequest {
    return ListBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBrandRequest>, I>>(object: I): ListBrandRequest {
    const message = createBaseListBrandRequest();
    message.keyword = object.keyword ?? "";
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseBrandResponse(): BrandResponse {
  return { id: "", name: "", active: false };
}

export const BrandResponse: MessageFns<BrandResponse> = {
  encode(message: BrandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: BrandResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandResponse>, I>>(base?: I): BrandResponse {
    return BrandResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandResponse>, I>>(object: I): BrandResponse {
    const message = createBaseBrandResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseBrandListResponse(): BrandListResponse {
  return { brand: [], total: 0 };
}

export const BrandListResponse: MessageFns<BrandListResponse> = {
  encode(message: BrandListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.brand) {
      Brand.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.brand.push(Brand.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandListResponse {
    return {
      brand: globalThis.Array.isArray(object?.brand) ? object.brand.map((e: any) => Brand.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: BrandListResponse): unknown {
    const obj: any = {};
    if (message.brand?.length) {
      obj.brand = message.brand.map((e) => Brand.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandListResponse>, I>>(base?: I): BrandListResponse {
    return BrandListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandListResponse>, I>>(object: I): BrandListResponse {
    const message = createBaseBrandListResponse();
    message.brand = object.brand?.map((e) => Brand.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export interface BrandService {
  CreateBrand(request: CreateBrandRequest): Promise<BrandResponse>;
  UpdateBrand(request: UpdateBrandRequest): Promise<BrandResponse>;
  DeleteBrand(request: DeleteBrandRequest): Promise<BrandResponse>;
  GetBrand(request: GetBrandRequest): Promise<BrandResponse>;
  ListBrand(request: ListBrandRequest): Promise<BrandListResponse>;
}

export const BrandServiceServiceName = "brand.BrandService";
export class BrandServiceClientImpl implements BrandService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BrandServiceServiceName;
    this.rpc = rpc;
    this.CreateBrand = this.CreateBrand.bind(this);
    this.UpdateBrand = this.UpdateBrand.bind(this);
    this.DeleteBrand = this.DeleteBrand.bind(this);
    this.GetBrand = this.GetBrand.bind(this);
    this.ListBrand = this.ListBrand.bind(this);
  }
  CreateBrand(request: CreateBrandRequest): Promise<BrandResponse> {
    const data = CreateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateBrand", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  UpdateBrand(request: UpdateBrandRequest): Promise<BrandResponse> {
    const data = UpdateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateBrand", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  DeleteBrand(request: DeleteBrandRequest): Promise<BrandResponse> {
    const data = DeleteBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteBrand", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  GetBrand(request: GetBrandRequest): Promise<BrandResponse> {
    const data = GetBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBrand", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  ListBrand(request: ListBrandRequest): Promise<BrandListResponse> {
    const data = ListBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBrand", data);
    return promise.then((data) => BrandListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
