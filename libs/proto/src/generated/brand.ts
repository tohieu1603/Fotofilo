// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: brand.proto

/* eslint-disable */
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import * as _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";

export const protobufPackage = "brand";

export interface Brand {
  id: string;
  name: string;
  active: boolean;
  deletedAt: string;
}

export interface CreateBrandRequest {
  name: string;
  active: boolean;
}

export interface UpdateBrandRequest {
  id: string;
  name: string;
  active: boolean;
}

export interface DeleteBrandRequest {
  id: string;
}

export interface GetBrandRequest {
  id: string;
}

export interface ListBrandRequest {
  keyword: string;
  page: number;
  limit: number;
}

export interface BrandResponse {
  id: string;
  name: string;
  active: boolean;
}

export interface BrandListResponse {
  brand: Brand[];
  total: number;
}

export const BRAND_PACKAGE_NAME = "brand";

function createBaseBrand(): Brand {
  return { id: "", name: "", active: false, deletedAt: "" };
}

export const Brand = {
  encode(message: Brand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    if (message.deletedAt !== "") {
      writer.uint32(58).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Brand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseCreateBrandRequest(): CreateBrandRequest {
  return { name: "", active: false };
}

export const CreateBrandRequest = {
  encode(message: CreateBrandRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateBrandRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateBrandRequest(): UpdateBrandRequest {
  return { id: "", name: "", active: false };
}

export const UpdateBrandRequest = {
  encode(message: UpdateBrandRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateBrandRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteBrandRequest(): DeleteBrandRequest {
  return { id: "" };
}

export const DeleteBrandRequest = {
  encode(message: DeleteBrandRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteBrandRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseGetBrandRequest(): GetBrandRequest {
  return { id: "" };
}

export const GetBrandRequest = {
  encode(message: GetBrandRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBrandRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseListBrandRequest(): ListBrandRequest {
  return { keyword: "", page: 0, limit: 0 };
}

export const ListBrandRequest = {
  encode(message: ListBrandRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.keyword !== "") {
      writer.uint32(26).string(message.keyword);
    }
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListBrandRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyword = reader.string();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseBrandResponse(): BrandResponse {
  return { id: "", name: "", active: false };
}

export const BrandResponse = {
  encode(message: BrandResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BrandResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseBrandListResponse(): BrandListResponse {
  return { brand: [], total: 0 };
}

export const BrandListResponse = {
  encode(message: BrandListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.brand) {
      Brand.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BrandListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.brand.push(Brand.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

export interface BrandServiceClient {
  createBrand(request: CreateBrandRequest, metadata: Metadata, ...rest: any): Observable<BrandResponse>;

  updateBrand(request: UpdateBrandRequest, metadata: Metadata, ...rest: any): Observable<BrandResponse>;

  deleteBrand(request: DeleteBrandRequest, metadata: Metadata, ...rest: any): Observable<BrandResponse>;

  getBrand(request: GetBrandRequest, metadata: Metadata, ...rest: any): Observable<BrandResponse>;

  listBrand(request: ListBrandRequest, metadata: Metadata, ...rest: any): Observable<BrandListResponse>;
}

export interface BrandServiceController {
  createBrand(
    request: CreateBrandRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BrandResponse> | Observable<BrandResponse> | BrandResponse;

  updateBrand(
    request: UpdateBrandRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BrandResponse> | Observable<BrandResponse> | BrandResponse;

  deleteBrand(
    request: DeleteBrandRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BrandResponse> | Observable<BrandResponse> | BrandResponse;

  getBrand(
    request: GetBrandRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BrandResponse> | Observable<BrandResponse> | BrandResponse;

  listBrand(
    request: ListBrandRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BrandListResponse> | Observable<BrandListResponse> | BrandListResponse;
}

export function BrandServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createBrand", "updateBrand", "deleteBrand", "getBrand", "listBrand"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BrandService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BrandService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BRAND_SERVICE_NAME = "BrandService";

export type BrandServiceService = typeof BrandServiceService;
export const BrandServiceService = {
  createBrand: {
    path: "/brand.BrandService/CreateBrand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateBrandRequest) => Buffer.from(CreateBrandRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateBrandRequest.decode(value),
    responseSerialize: (value: BrandResponse) => Buffer.from(BrandResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BrandResponse.decode(value),
  },
  updateBrand: {
    path: "/brand.BrandService/UpdateBrand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateBrandRequest) => Buffer.from(UpdateBrandRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateBrandRequest.decode(value),
    responseSerialize: (value: BrandResponse) => Buffer.from(BrandResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BrandResponse.decode(value),
  },
  deleteBrand: {
    path: "/brand.BrandService/DeleteBrand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteBrandRequest) => Buffer.from(DeleteBrandRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteBrandRequest.decode(value),
    responseSerialize: (value: BrandResponse) => Buffer.from(BrandResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BrandResponse.decode(value),
  },
  getBrand: {
    path: "/brand.BrandService/GetBrand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBrandRequest) => Buffer.from(GetBrandRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBrandRequest.decode(value),
    responseSerialize: (value: BrandResponse) => Buffer.from(BrandResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BrandResponse.decode(value),
  },
  listBrand: {
    path: "/brand.BrandService/ListBrand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListBrandRequest) => Buffer.from(ListBrandRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListBrandRequest.decode(value),
    responseSerialize: (value: BrandListResponse) => Buffer.from(BrandListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BrandListResponse.decode(value),
  },
} as const;

export interface BrandServiceServer extends UntypedServiceImplementation {
  createBrand: handleUnaryCall<CreateBrandRequest, BrandResponse>;
  updateBrand: handleUnaryCall<UpdateBrandRequest, BrandResponse>;
  deleteBrand: handleUnaryCall<DeleteBrandRequest, BrandResponse>;
  getBrand: handleUnaryCall<GetBrandRequest, BrandResponse>;
  listBrand: handleUnaryCall<ListBrandRequest, BrandListResponse>;
}
